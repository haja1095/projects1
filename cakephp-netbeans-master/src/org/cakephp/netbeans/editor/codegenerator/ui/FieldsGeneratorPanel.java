/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2013 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2013 Sun Microsystems, Inc.
 */
package org.cakephp.netbeans.editor.codegenerator.ui;

import java.util.List;
import javax.swing.JTree;
import javax.swing.tree.MutableTreeNode;
import org.cakephp.netbeans.editor.codegenerator.FieldInfo;
import org.cakephp.netbeans.editor.codegenerator.Property;
import org.openide.filesystems.FileObject;

/**
 *
 * @author junichi11
 */
public class FieldsGeneratorPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = -2775979252996739813L;
    protected final String className;
    private final List<FieldInfo> fields;

    /**
     * Creates new form FieldsGeneratorPanel
     */
    public FieldsGeneratorPanel(FileObject target, List<FieldInfo> fields) {
        this.fields = fields;
        initComponents();
        className = target.getName();
        initPanel();
        initTree();
    }

    private void initPanel() {
    }

    private void initTree() {
        JTree tree = new JTree(getRootNode());
        tree.setCellRenderer(new CheckBoxTreeRenderer());
        tree.putClientProperty("JTree.lineStyle", "Angled");  //NOI18N
        NodeSelectionListener listener = new NodeSelectionListener(tree);
        tree.addMouseListener(listener);
        tree.addKeyListener(listener);
        tree.expandRow(0);
        tree.setShowsRootHandles(true);
        tree.setSelectionRow(0);
        initTree(tree);
        scrollPane.add(tree);
        scrollPane.setViewportView(tree);
    }

    protected void initTree(JTree tree) {
        // ignore root node
        tree.setRootVisible(false);
        expandAll(tree);
    }

    protected MutableTreeNode getRootNode() {
        // init root node
        CheckNode root = new CheckNode.MBHCNode(className);
        for (FieldInfo field : fields) {
            CheckNode.MBHCNode mbhcNode = new CheckNode.MBHCNode(field.getName());
            for (Property property : field.getPossibleProperties()) {
                String propertyName = property.getName();
                if (propertyName != null && !propertyName.isEmpty()) {
                    mbhcNode.add(new CheckNode.MBHCClassNode(property));
                }
            }
            root.add(mbhcNode);
        }
        return root;
    }

    private static void expandAll(JTree tree) {
        int row = 0;
        while (row < tree.getRowCount()) {
            tree.expandRow(row);
            row++;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        topMessageLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(topMessageLabel, org.openide.util.NbBundle.getMessage(FieldsGeneratorPanel.class, "FieldsGeneratorPanel.topMessageLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(topMessageLabel)
                        .addGap(0, 284, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(topMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JLabel topMessageLabel;
    // End of variables declaration//GEN-END:variables
}
